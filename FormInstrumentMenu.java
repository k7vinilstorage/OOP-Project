
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author joao
 */
public class FormInstrumentMenu extends javax.swing.JFrame {

    /**
     * Creates new form FormInstrumentMenu
     */
    
    private BDStorage storage = BDStorage.createStorage();
    
    private static FormInstrumentMenu i;
    
    private FormInstrumentMenu() {
        initComponents();
    }
    
    public static FormInstrumentMenu createInstrumentMenu() {
        if(i == null) {
            i = new FormInstrumentMenu();
        }
        return i;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jSpinner1 = new javax.swing.JSpinner();
        modelLb = new javax.swing.JLabel();
        modelTf = new javax.swing.JTextField();
        searchBt = new javax.swing.JButton();
        instrumentCb = new javax.swing.JComboBox<>();
        guitarLb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pianoTb = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        guitarTb = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        drumsTb = new javax.swing.JTable();
        removeBt = new javax.swing.JButton();
        pianoLb = new javax.swing.JLabel();
        drumsLb = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        guitarMenu = new javax.swing.JMenu();
        addGuitar = new javax.swing.JMenuItem();
        editGuitar = new javax.swing.JMenuItem();
        pianoMenu = new javax.swing.JMenu();
        addPiano = new javax.swing.JMenuItem();
        editPiano = new javax.swing.JMenuItem();
        drumsMenu = new javax.swing.JMenu();
        addDrums = new javax.swing.JMenuItem();
        editDrums = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Instrument Menu");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        modelLb.setText("Search Instrument by Model:");

        modelTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelTfActionPerformed(evt);
            }
        });

        searchBt.setText("Search");
        searchBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtActionPerformed(evt);
            }
        });

        instrumentCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Guitar", "Piano", "Drums" }));

        guitarLb.setText("Guitars:");

        pianoTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Piano Model", "Body Type", "Brand"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pianoTb);

        guitarTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Guitar Model", "Shape", "Brand"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(guitarTb);
        if (guitarTb.getColumnModel().getColumnCount() > 0) {
            guitarTb.getColumnModel().getColumn(0).setResizable(false);
            guitarTb.getColumnModel().getColumn(2).setResizable(false);
        }

        drumsTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drums Model", "Shell Material", "Brand"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(drumsTb);

        removeBt.setText("Remove Instrument...");
        removeBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtActionPerformed(evt);
            }
        });

        pianoLb.setText("Pianos:");

        drumsLb.setText("Drums:");

        guitarMenu.setText("Guitar");

        addGuitar.setText("Add Guitar...");
        addGuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGuitarActionPerformed(evt);
            }
        });
        guitarMenu.add(addGuitar);

        editGuitar.setText("Edit Guitar...");
        editGuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGuitarActionPerformed(evt);
            }
        });
        guitarMenu.add(editGuitar);

        jMenuBar1.add(guitarMenu);

        pianoMenu.setText("Piano");

        addPiano.setText("Add Piano...");
        addPiano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPianoActionPerformed(evt);
            }
        });
        pianoMenu.add(addPiano);

        editPiano.setText("Edit Piano...");
        editPiano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPianoActionPerformed(evt);
            }
        });
        pianoMenu.add(editPiano);

        jMenuBar1.add(pianoMenu);

        drumsMenu.setText("Drums");

        addDrums.setText("Add Drums...");
        addDrums.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDrumsActionPerformed(evt);
            }
        });
        drumsMenu.add(addDrums);

        editDrums.setText("Edit Drums...");
        editDrums.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDrumsActionPerformed(evt);
            }
        });
        drumsMenu.add(editDrums);

        jMenuBar1.add(drumsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modelLb)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(modelTf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(removeBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(instrumentCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchBt)))
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drumsLb)
                            .addComponent(pianoLb)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guitarLb))
                        .addGap(0, 19, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(modelLb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBt)
                    .addComponent(instrumentCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guitarLb)
                    .addComponent(removeBt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pianoLb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(drumsLb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void modelTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modelTfActionPerformed

    private void addGuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGuitarActionPerformed
        FormAddGuitar.createAddGuitar().setVisible(true);
    }//GEN-LAST:event_addGuitarActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        listGuitar();
        listPiano();
        listDrums();
    }//GEN-LAST:event_formWindowGainedFocus

    private void searchBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtActionPerformed
        searchInstrumentByModel();
    }//GEN-LAST:event_searchBtActionPerformed

    private void addPianoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPianoActionPerformed
        FormAddPiano.createAddPiano().setVisible(true);
    }//GEN-LAST:event_addPianoActionPerformed

    private void addDrumsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDrumsActionPerformed
        FormAddDrums.createAddDrums().setVisible(true);
    }//GEN-LAST:event_addDrumsActionPerformed

    private void editGuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGuitarActionPerformed
        FormEditGuitar.createEditGuitar().setVisible(true);
    }//GEN-LAST:event_editGuitarActionPerformed

    private void editDrumsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDrumsActionPerformed
        FormEditDrums.createEditDrums().setVisible(true);
    }//GEN-LAST:event_editDrumsActionPerformed

    private void editPianoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPianoActionPerformed
        FormEditPiano.createEditPiano().setVisible(true);
    }//GEN-LAST:event_editPianoActionPerformed

    private void removeBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtActionPerformed
        FormDelInstrument.createDelInstrument().setVisible(true);
    }//GEN-LAST:event_removeBtActionPerformed

    private void listGuitar() {
        DefaultTableModel modTable = (DefaultTableModel)guitarTb.getModel();
        int linePos = 0;
        modTable.setRowCount(linePos);
        
        for(Guitar g : storage.getGuitarStock()) {
           modTable.insertRow(linePos, new Object[]{g.getModel(), g.getShape(), g.getBrand()});
           linePos++;
        }
    }
    
    private void listPiano() {
        DefaultTableModel modTable = (DefaultTableModel)pianoTb.getModel();
        int linePos = 0;
        modTable.setRowCount(linePos);
        
        for(Piano p : storage.getPianoStock()) {
           modTable.insertRow(linePos, new Object[]{p.getModel(), p.getBodyType(), p.getBrand()});
           linePos++;
        }
    }
    
    private void listDrums() {
        DefaultTableModel modTable = (DefaultTableModel)drumsTb.getModel();
        int linePos = 0;
        modTable.setRowCount(linePos);
        
        for(Drums d : storage.getDrumsStock()) {
           modTable.insertRow(linePos, new Object[]{d.getModel(), d.getShellMaterial(), d.getBrand()});
           linePos++;
        }
    }
    
    private void searchInstrumentByModel() {
        int id = 0;
        String info = "";
        
        try {
            switch(instrumentCb.getSelectedItem().toString()) {
                case "Guitar":
                    id = GetArrayId.createGetArrayId().getGuitarId(modelTf.getText());

                    info = "Model: " + storage.getGuitarStock().get(id).getModel() +
                            "\nBrand: " + storage.getGuitarStock().get(id).getBrand() +
                            "\nShape: " + storage.getGuitarStock().get(id).getShape() + 
                            "\nType: " + storage.getGuitarStock().get(id).getType() + 
                            "\nCategory: " + storage.getGuitarStock().get(id).getCategory() +
                            "\nString Count: " + storage.getGuitarStock().get(id).getStringCount() + 
                            "\nAvailability: " + storage.getGuitarStock().get(id).getAvailability() +
                            "\nPrice: " + storage.getGuitarStock().get(id).getPrice();
                    break;
                case "Piano":
                    id = GetArrayId.createGetArrayId().getPianoId(modelTf.getText());

                    info = "Model: " + storage.getPianoStock().get(id).getModel() +
                            "\nBrand: " + storage.getPianoStock().get(id).getBrand() +
                            "\nBody Type: " + storage.getPianoStock().get(id).getBodyType()+ 
                            "\nType: " + storage.getPianoStock().get(id).getType() + 
                            "\nCategory: " + storage.getPianoStock().get(id).getCategory() +
                            "\nKey Count: " + storage.getPianoStock().get(id).getKeyCount()+ 
                            "\nAvailability: " + storage.getPianoStock().get(id).getAvailability() +
                            "\nPrice: " + storage.getPianoStock().get(id).getPrice();
                    break;
                case "Drums":
                    id = GetArrayId.createGetArrayId().getDrumsId(modelTf.getText());

                    info = "Model: " + storage.getDrumsStock().get(id).getModel() +
                            "\nBrand: " + storage.getDrumsStock().get(id).getBrand() +
                            "\nShell Material: " + storage.getDrumsStock().get(id).getShellMaterial()+ 
                            "\nType: " + storage.getDrumsStock().get(id).getType() + 
                            "\nCategory: " + storage.getDrumsStock().get(id).getCategory() +
                            "\nPieces Count: " + storage.getDrumsStock().get(id).getPiecesCount() + 
                            "\nAvailability: " + storage.getDrumsStock().get(id).getAvailability() +
                            "\nPrice: " + storage.getDrumsStock().get(id).getPrice();
                    break;
            }

            Dialogs.createDialogs().infoDialog(info, instrumentCb.getSelectedItem().toString() + " Search Results");
            
            modelTf.setText("");
        }
        catch (ItemNotFoundExeption infe){
            infe.itemNotFoundErr();
        }
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormInstrumentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormInstrumentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormInstrumentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormInstrumentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormInstrumentMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addDrums;
    private javax.swing.JMenuItem addGuitar;
    private javax.swing.JMenuItem addPiano;
    private javax.swing.JLabel drumsLb;
    private javax.swing.JMenu drumsMenu;
    private javax.swing.JTable drumsTb;
    private javax.swing.JMenuItem editDrums;
    private javax.swing.JMenuItem editGuitar;
    private javax.swing.JMenuItem editPiano;
    private javax.swing.JLabel guitarLb;
    private javax.swing.JMenu guitarMenu;
    private javax.swing.JTable guitarTb;
    private javax.swing.JComboBox<String> instrumentCb;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel modelLb;
    private javax.swing.JTextField modelTf;
    private javax.swing.JLabel pianoLb;
    private javax.swing.JMenu pianoMenu;
    private javax.swing.JTable pianoTb;
    private javax.swing.JButton removeBt;
    private javax.swing.JButton searchBt;
    // End of variables declaration//GEN-END:variables
}
